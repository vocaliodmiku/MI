/*
 * File: LM.h.
 * Last modified at 20:01 on 21 December 2013 by WuBin.
 * Last modified at 18:05 on 9 January 2014 by WuBin. 
 * Add facility to compute sentence probability.
 *
 * This class provides basic facilities of the LM by reading the ARPA format file generated by the SRILM toolkit.
 * 
 * The ARPA backoff format was developed by Doug Paul at MIT Lincoln Labs for research sponsored 
 * by the U.S. Department of Defense Advanced Research Project Agency (ARPA).
 * 
 * The APRA Format:
 *
 * \data\
 * ngram 1=500
 * ngram 2=1250
 * ngram 3=2500
 *
 * /-- The data that follows indicates 1-grams, 2-grams, etc. Here is an example for a 3-gram. --/
 * \1-grams:
 * log10_prob(word1) word1 log10_backoff(word1)
 * log10_prob(word2) word2 log10_backoff(word2)
 * ...
 *
 * \2-grams:
 * log10_prob(word1|word1) word1 word1 log10_backoff(word1,word1)
 * log10_prob(word1|word2) word2 word1 log10_backoff(word2,word1)
 * log10_prob(word2|word1) word1 word2 log10_backoff(word1,word2)
 * ...
 *
 * \3-grams:
 * log10_prob(word3|word1,word2) word1 word2 word3
 * ...
 *
 * \end\
 *
 * To calculate a missing n-gram, the CMU-Cambridge toolkit provides (in its comments) the following recipe, which is copied verbatim:
 * p(wd3|wd1,wd2)= if(trigram exists)           p_3(wd1,wd2,wd3)
 *                 else if(bigram w1,w2 exists) bo_wt_2(w1,w2)*p(wd3|wd2)
 *                 else                         p(wd3|w2)
 *
 * p(wd2|wd1)= if(bigram exists) p_2(wd1,wd2)
 *                 else              bo_wt_1(wd1)*p_1(wd2)
 *
 * My implementation of the backoff equation is LOG 10 based, and considers some out of vocabulary (OOV) issues.
 *
 * Note: 1. The class only supports the bigram model and the trigram backoff model.
 *       2. Backoff weights are required only for those N-grams that form a prefix of longer N-grams in the model.
 *          The highest-order N-grams in particular will not need backoff weights (they would be useless).
 *       3. If one word of the gram is OOV, the probability of gram will be 0 
 *          expect for the first word of trigram as a bug version of  CMU-Cambridge toolkit.
 */

#ifndef _lm_h
#define _lm_h

#include <iostream>
#include <string>
#include <map>
#include <fstream>
#include <sstream>
#include <assert.h>
#include <math.h>
#include <vector>
#include <iterator>
using namespace std;

/* ln10 from srilm: /home/srilm/CVS/srilm/lm/src/Prob.h. */
#define LN10 2.30258509299404568402

/* Note: BOW stands for the backoff weight. */
typedef float Log10Prob;
typedef float Log10BOW;
typedef double Prob;

/* Zero probability. e.g. "-99	<s>	-7.384902" from SmallCorpusBigram.lm. */
const Log10Prob LOG10_PROB_ZERO = -99;
/* Zero backoff weight. e.g. "-1.176091	都	-99"  from SmallCorpusBigram.lm. */
const Log10BOW LOG10_BOW_ZERO = -99;
/* The backoff weight is empty because the corresponding N-gram is not prefix of longer N-grams in the model
 * or its frequency as prefixes is too low. e.g. "-1.149123	首都机 场起降创" from MidCorpusTrigram.lm. 
 */
const Log10BOW LOG10_BOW_EMPTY = 1.0;

/* Only required for (N-1)-grams or lower order ones. 
 * The backoff weight may be normal value or 0 or empty. 
 */
struct GramInfo {
	Log10Prob pr;
	Log10BOW bow;
	GramInfo(Log10Prob p, Log10BOW b) : pr(p), bow(b) {
	}
};

/* The probabilities of (N-1)-grams or lower order ones are stored together with the backoff weights 
 * as a single map instead of separating as two hash maps, thus saving the memory.
 * Note that the highest order N-grams only need the probability information. 
 */
typedef map<string, GramInfo> UnigramWithBOW;
typedef map<string, map<string, Log10Prob> > Bigram;
typedef map<string, map<string, GramInfo> > BigramWithBOW;
typedef map<string, map<string, map<string, Log10Prob> > > Trigram;

class LM {
public:
	LM(int order, string ARPAFile);
	/* Get the probabilities of grams by katz's backoff equation from internal maps. */ 
	Log10Prob getLogUnigram(const string &word) const;
	Log10Prob getLogBigram(const string &history, const string &word) const;
	Log10Prob getLogTrigram(const string &distantHistory, const string &history, const string &word) const;
    
	/* Adapted from srilm: /home/srilm/CVS/srilm/lm/src/Prob.h. */
	static inline Prob LogPtoProb(Log10Prob prob)  {
		return	prob == LOG10_PROB_ZERO ? 0 : exp(prob * LN10);
	};

	static inline void segmentedStringToVector(const string &seq, vector<string> &vec) {
		stringstream converter(seq);
		copy(istream_iterator<string>(converter), istream_iterator<string>(), back_inserter(vec));
	}

	/* Interfaces to get true probabilities of grams. */
	Prob getUnigram(const string &word) const { return LogPtoProb(getLogUnigram(word)); };
	Prob getBigram(const string &history, const string &word) const { return LogPtoProb(getLogBigram(history, word)); };
	Prob getTrigram(const string &distantHistory, const string &history, const string &word) const { return LogPtoProb(getLogTrigram(distantHistory, history, word)); };
	Prob getSentenceProb(const string &sentence) const;
                
        /* Interface to get order of the LM. */
        int getOrder() const { return ORDER;}

private:
	/* The order of the language model. */
	const int ORDER;
	/* The ARPA format file of the bigram model or the trigram model generated by the SRILM toolkit. */
	const string ARPAFormatFile;

	/* Internal maps: 
	 *      map				key					value
	 *      trigram 		key: dhistory		value: mapOut
	 *      mapOut  	 	key: history		value: mapIn
	 *      mapIn   		key: word			value: probability (or gram info)
     *
	 *      bigram  	 	key: history		value: mapIn
	 *      mapIn   		key: word			value: probability (or gram info)
	 *
	 *      unigram   		key: word			value: probability (or gram info)
	 */
	/* Shared by the bigram model and the trigram model. */
	UnigramWithBOW unigramWithBOW;
	/* For the bigram model. */
	Bigram bigram;
	/* For the trigram model. */
	BigramWithBOW bigramWithBOW;
	Trigram trigram;

/* Helper functions. */	

	/* Getting information from ARPA format file for initialization. */
	void initUnigramWithBOW(ifstream &in);	
	void initBigram(ifstream &in);
	void initBigramWithBOW(ifstream &in);
	void initTrigram(ifstream &in);

	/* Parse a line of a bigram from the ARPA trigram backoff format file.
	 * Note some backoff weights may be left off because they are not required. 
	 */
	inline void parseBigramWithBOW(const string &line, Log10Prob &pr, string &history, string &word, Log10BOW &bow) const;

	/* Search functions. Find the gram information including probability or backoff weight from internal maps. */
	bool findUnigramWithBOW(const string &word, Log10Prob &pr, Log10Prob &bow) const;
	bool findBigram(const string &history, const string &word, Log10Prob &pr) const;
	bool findBigramWithBOW(const string &history, const string &word, Log10Prob &pr, Log10BOW &bow) const;
	bool findTrigram(const string &dhistory, const string &history, const string &word, Log10Prob &pr) const;

	/* This function helps computing Pr * BOW. Store the final result with log10 format. */ 
	inline Log10Prob backoff(const Log10BOW &bow, const Log10Prob &pr) const {
		return (bow == LOG10_PROB_ZERO || pr == LOG10_PROB_ZERO) ? LOG10_PROB_ZERO : bow + pr; 
	};

	/* For Linux. */
	/* When getline() from the windows file in linux, a dummy '\r' should be discarded. */
	inline void chomp(string &line) const {
		if (line.size() != 0 && line[line.size() - 1] == '\r') line = line.substr(0, line.size() - 1);
	}
};

#endif
